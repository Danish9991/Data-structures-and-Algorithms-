/**
 * HashTable is class which has properties to set, get the values by using the hash function
 */

class HashTable {
  constructor(size) {
    this.data = new Array(size);
  }

  /**
   * _hash property return the hash(index) depends upon the size of array
   * Time Complexity O(1)
   * @param {*} key
   * @returns
   */

  _hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash = (hash + key.charCodeAt(i) * i) % this.data.length;
    }
    return hash;
  }

  /**
   * set property stores the key and value on index generated by _hash method
   * Time Complexity O(1)
   * @param {*} key
   * @param {*} value
   */

  set(key, value) {
    const address = this._hash(key);
    if (!this.data[address]) {
      this.data[address] = [];
    }
    this.data[address].push([key, value]);
  }

  /**
   * get property return the value of key
   * Time Complexity O(1), during collison Time Complexity is O(n)
   * @param {*} key
   */

  get(key) {
    const address = this._hash(key);
    const currentBucket = this.data[address];
    // collision resolution code Time Complexity O(n)
    if (currentBucket !== undefined) {
      for (let i = 0; i < currentBucket.length; i++) {
        if (currentBucket[i][0] === key) {
          return currentBucket[i][1];
        }
      }
    }
    return undefined;
  }

  /**
   * keys property return the key of array
   * Time Complexity O(n)
   */

  keys() {
    const keyArray = [];
    for (let i = 0; i < this.data.length; i++) {
      if (this.data[i]) {
        keyArray.push(this.data[i][0][0]);
      }
    }
    return keyArray;
  }
}

//instantiation
const myHashTable = new HashTable(50);
myHashTable.set("grapes", 100);
myHashTable.set("apples", 12);
myHashTable.set("mango", 24);
console.log(myHashTable.get("apples"));
console.log(myHashTable.keys());
